{
  "service_name": "coveralls-python",
  "git": {
    "head": {
      "committer_email": "michellstut@gmail.com",
      "author_email": "michellstut@gmail.com",
      "author_name": "mstuttgart",
      "message": "[NEW] Remocao de excepcoes nao usadas e simplificacao das demais",
      "committer_name": "mstuttgart",
      "id": "fa1dfb04cdf9ee58a058b9b11c3f57fdf63b303b"
    },
    "remotes": [
      {
        "url": "https://github.com/mstuttgart/python-sigep.git",
        "name": "origin"
      }
    ],
    "branch": "develop"
  },
  "config_file": ".coveragerc",
  "source_files": [
    {
      "source": "# -*- coding: utf-8 -*-\n# #############################################################################\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2016 Michell Stuttgart\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n###############################################################################\n",
      "name": "sigep/__init__.py",
      "coverage": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ]
    },
    {
      "source": "# -*- coding: utf-8 -*-\n# #############################################################################\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2016 Michell Stuttgart\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n###############################################################################\n\nfrom campos import CampoString\n\n\nclass TagBase(object):\n\n    def get_xml(self):\n        pass\n\n\nclass RequestBase(object):\n\n    def __init__(self, response_obj):\n        self._response = response_obj\n        self._header = \\\n            '''<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\n            xmlns:cli=\\\"http://cliente.bean.master.sigep.bsb.correios.com.br/\\\">\n            <soap:Header/><soap:Body>'''\n        self._footer = '</soap:Body></soap:Envelope>'\n\n    @property\n    def response(self):\n        return self._response\n\n    def get_xml(self):\n        pass\n\n\nclass RequestBaseAutentic(RequestBase):\n\n    def __init__(self, response_obj, usuario, senha):\n        super(RequestBaseAutentic, self).__init__(response_obj)\n        self._usuario = CampoString('usuario', obrigatorio=True)\n        self._senha = CampoString('senha', obrigatorio=True)\n\n        self._usuario.valor = usuario\n        self._senha.valor = senha\n\n    @property\n    def response(self):\n        return self._response\n\n    @property\n    def usuario(self):\n        return self._usuario\n\n    @property\n    def senha(self):\n        return self._senha\n\n    def get_xml(self):\n        xml = u'<usuario>%s</usuario>' % self.usuario.valor\n        xml += u'<senha>%s</senha>' % self.senha.valor\n        return xml\n\n\nclass ResponseBase(object):\n\n    def __init__(self):\n        self.status_code = None\n        self.encoding = None\n        self._xml = None\n        self.body_request = None\n\n    @property\n    def xml(self):\n        return self._xml\n\n    @xml.setter\n    def xml(self, value):\n        self._xml = value\n        self._parse_xml(value)\n\n    def _parse_xml(self, xml):\n        pass\n",
      "name": "sigep/base.py",
      "coverage": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        null,
        null,
        1,
        null,
        1,
        0,
        null,
        null,
        1,
        null,
        1,
        1,
        1,
        null,
        null,
        null,
        1,
        null,
        1,
        null,
        0,
        null,
        1,
        0,
        null,
        null,
        1,
        null,
        1,
        1,
        1,
        1,
        null,
        1,
        1,
        null,
        1,
        null,
        0,
        null,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        1,
        1,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        1,
        1,
        1,
        null,
        1,
        null,
        0,
        null,
        1,
        null,
        0,
        0,
        null,
        1,
        0
      ]
    },
    {
      "source": "# -*- coding: utf-8 -*-\n# #############################################################################\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2016 Michell Stuttgart\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n###############################################################################\n\nimport sigep_exceptions\n\n\nclass CampoBase(object):\n\n    def __init__(self, nome, obrigatorio=False):\n        self.nome = nome\n        self._valor = None\n        self._obrigatorio = obrigatorio\n\n    @property\n    def obrigatorio(self):\n        return self._obrigatorio\n\n    @property\n    def valor(self):\n        return self._valor\n\n    @valor.setter\n    def valor(self, val):\n        val = self._formata_valor(val)\n        if self._validar(val):\n            self._valor = val\n\n    def _formata_valor(self, valor):\n        return valor\n\n    def _validar(self, valor):\n        if valor is None and self.obrigatorio:\n            raise sigep_exceptions.ErroCampoObrigatorio(self.nome)\n        return True\n\n\nclass CampoString(CampoBase):\n\n    def __init__(self, nome, obrigatorio=False, tamanho=0):\n        super(CampoString, self).__init__(nome=nome, obrigatorio=obrigatorio)\n        self._tamanho = tamanho\n\n    @property\n    def tamanho(self):\n        return self._tamanho\n\n    def _formata_valor(self, valor):\n        if not isinstance(valor, str):\n            raise sigep_exceptions.ErroTipoIncorreto(self.nome,\n                                                     type(valor),\n                                                     str)\n        return valor.rstrip()\n\n    def _validar(self, valor):\n\n        if self.tamanho != 0 and len(valor) != self.tamanho:\n            raise sigep_exceptions.ErroCampoTamanhoIncorreto(self.nome,\n                                                             self.tamanho,\n                                                             len(valor))\n        return super(CampoString, self)._validar(valor)\n\n\nclass CampoCEP(CampoString):\n\n    def __init__(self, nome, obrigatorio=False):\n        super(CampoCEP, self).__init__(nome, obrigatorio=obrigatorio,\n                                       tamanho=8)\n\n    def _formata_valor(self, valor):\n\n        if not isinstance(valor, str):\n            raise sigep_exceptions.ErroTipoIncorreto(self.nome,\n                                                     type(valor),\n                                                     str)\n        valor = valor.replace('-', '')\n        valor = valor.replace('.', '')\n        return valor.rstrip()\n\n    def _validar(self, valor):\n\n        if not valor.isdigit():\n            raise sigep_exceptions.ErroCampoNaoNumerico(self.nome)\n\n        return super(CampoCEP, self)._validar(valor)\n",
      "name": "sigep/campos.py",
      "coverage": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        1,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        1,
        1,
        null,
        1,
        1,
        null,
        1,
        1,
        1,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        1,
        null,
        1,
        null,
        1,
        null,
        1,
        1,
        1,
        null,
        null,
        1,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        1,
        1,
        1,
        null,
        1,
        null,
        1,
        1,
        null,
        1
      ]
    },
    {
      "source": "# -*- coding: utf-8 -*-\n# #############################################################################\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2016 Michell Stuttgart\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n###############################################################################\n\n\nclass SigepBaseException(Exception):\n    pass\n\n\nclass ErroTipoIncorreto(SigepBaseException):\n\n    def __init__(self, nome_campo, tipo, tipo_correto):\n        self.msg = u'''Campo %s deve ser %s . Tipo encontrado: %s''' % (\n            nome_campo, str(tipo_correto), str(tipo))\n\n\nclass ErroCampoObrigatorio(SigepBaseException):\n\n    def __init__(self, nome_campo):\n        self.msg = u'''Campo %s \u00e9 de envio obrigatorio, mas n\u00e3o foi\n        preenchido!''' % nome_campo\n\n\nclass ErroCampoNaoNumerico(SigepBaseException):\n\n    def __init__(self, nome_campo):\n        self.msg = u'''Campo %s n\u00e3o \u00e9 constitu\u00eddo apenas por n\u00fameros!''' % \\\n                   nome_campo\n\n\nclass ErroCampoTamanhoIncorreto(SigepBaseException):\n\n    def __init__(self, nome_campo, tamanho_esperado, tamanho):\n        self.msg = u'''Campo %s possui tamanho incorreto. Esperado \u00e9 %d mas o\n        encontrado foi %d.''' % (nome_campo, tamanho_esperado, tamanho)\n",
      "name": "sigep/sigep_exceptions.py",
      "coverage": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        1,
        1,
        null,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        null,
        1,
        null,
        1,
        1,
        null,
        null,
        null,
        1,
        null,
        1,
        1,
        null
      ]
    }
  ]
}